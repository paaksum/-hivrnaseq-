knitr::opts_chunk$set(echo = TRUE)
source("http://www.bioconductor.org/biocLite.R")
biocLite("DESeq")
browseVignettes("DeSeq")
library("DESeq")
source("http://www.bioconductor.org/biocLite.R")
biocLite("DESeq2")
library("DESeq2")
knitr::opts_chunk$set(echo = TRUE)
#source("http://www.bioconductor.org/biocLite.R")
#biocLite("DESeq2")
library("DESeq2")
source("http://www.bioconductor.org/biocLite.R")
biocLite("DESeq2")
library("DESeq2")
source("http://www.bioconductor.org/biocLite.R")
biocLite("DESeq2")
library("DESeq2")
library(BiocInstaller)
biocValid()
biocLite()
biocValid()
library(DESeq2)
biocLite("stringi")
library(DESeq2)
#source("http://www.bioconductor.org/biocLite.R")
#biocLite("DESeq2")
library("DESeq2")
directory<-'C:\Users\paaks\Downloads\raw_count_files'
#source("http://www.bioconductor.org/biocLite.R")
#biocLite("DESeq2")
library("DESeq2")
directory<-'\Users\paaks\Downloads\raw_count_files'
#source("http://www.bioconductor.org/biocLite.R")
#biocLite("DESeq2")
library("DESeq2")
directory<-'\home\paaks\Downloads\raw_count_files'
#source("http://www.bioconductor.org/biocLite.R")
#biocLite("DESeq2")
library("DESeq2")
directory<-'/home/paaks/Downloads/raw_count_files'
sampleFiles<-grep('treated',list.files(directory),value = TRUE)
sampleCondition<-c('treated','treated','treated','untreated','untreated','untreated')
sampleTable<-data.frame(sampleName=sampleFiles, fileName-sampleFiles)
#source("http://www.bioconductor.org/biocLite.R")
#biocLite("DESeq2")
library("DESeq2")
directory<-'/home/paaks/Downloads/raw_count_files'
sampleFiles<-grep('treated',list.files(directory),value = TRUE)
sampleCondition<-c('treated','treated','treated','untreated','untreated','untreated')
sampleTable<-data.frame(sampleName=sampleFiles, fileName=sampleFiles)
ddsHTSeq<-DEseqDataSetFromHTSeqCount(sampleTable-sampleTable,directory=directory, design=~condition)
ddsHTSeq<-DESeqDataSetFromHTSeqCount(sampleTable-sampleTable,directory=directory, design=~condition)
#source("http://www.bioconductor.org/biocLite.R")
#biocLite("DESeq2")
library("DESeq2")
directory<-'/home/paaks/Downloads/raw_count_files'
sampleFiles<-grep('treated',list.files(directory),value = TRUE)
sampleCondition<-c('treated','treated','treated','untreated','untreated','untreated')
sampleTable<-data.frame(sampleName=sampleFiles, fileName=sampleFiles)
ddsHTSeq<-DESeqDataSetFromHTSeqCount(sampleTable=sampleTable,directory=directory, design=~condition)
colData(ddsHTSeq)$condition<-factor(colData(ddsHTSeq)$condition, levels = c('untreated','treated'))
sampleTable<-data.frame(sampleName=sampleFiles, fileName=sampleFiles)
ddsHTSeq<-DESeqDataSetFromHTSeqCount(sampleTable=sampleTable,directory=directory, design=~condition)
View(sampleTable)
View(sampleTable)
sampleTable<-data.frame(sampleName=sampleFiles, fileName=sampleFiles,condition=sampleCondition)
sampleTable<-data.frame(sampleName=sampleFiles, fileName=sampleFiles,condition=sampleCondition)
directory<-'/home/paaks/Downloads/raw_count_files'
sampleFiles<-grep('treated',list.files(directory),value = TRUE)
sampleCondition<-c('treated','treated','treated','untreated','untreated','untreated')
sampleFiles<-c("treated1.txt","treated2.txt","treated3.txt","untreated1.txt","untreated2.txt","untreated3.txt")
sampleCondition<-c('treated','treated','treated','untreated','untreated','untreated')
sampleTable<-data.frame(sampleName=sampleFiles, fileName=sampleFiles,condition=sampleCondition)
ddsHTSeq<-DESeqDataSetFromHTSeqCount(sampleTable=sampleTable,directory=directory, design=~condition)
directory<-'/Users/paaks/Downloads/raw_count_files'
sampleFiles<-c("treated1.txt","treated2.txt","treated3.txt","untreated1.txt","untreated2.txt","untreated3.txt")
sampleCondition<-c('treated','treated','treated','untreated','untreated','untreated')
sampleTable<-data.frame(sampleName=sampleFiles, fileName=sampleFiles,condition=sampleCondition)
ddsHTSeq<-DESeqDataSetFromHTSeqCount(sampleTable=sampleTable,directory=directory, design=~condition)
colData(ddsHTSeq)$condition<-factor(colData(ddsHTSeq)$condition, levels = c('untreated','treated'))
dds<-DESeq(ddsHTSeq)
dds<-DESeq(ddsHTSeq)
res<-results(dds)
res<-res[order(res$padj),]
head(res)
plotMA(dds,ylim=c(-2,2),main='DESeq2')
dev.copy(png,'deseq2_MAplot.png')
dev.off()
plotMA(dds,ylim=c(-2,2),main='DESeq2')
View(res)
View(ddsHTSeq)
View(dds)
View(sampleTable)
plotMA(dds,ylim=c(-2,2),main='DESeq2')
dev.copy(png,'deseq2_MAplot.png')
dev.off()
source("http://www.bioconductor.org/biocLite.R")
biocLite("edgeR")
source("http://www.bioconductor.org/biocLite.R")
biocLite("Biobase")
knitr::opts_chunk$set(echo = TRUE)
library("DESeq2")
library("limma")
library("Biobase")
library("edgeR")
source("http://www.bioconductor.org/biocLite.R")
biocLite("Biobase")
library("Biobase")
library("DESeq2")
library("DESeq2")
library("limma")
library("Biobase")
library("edgeR")
library("DESeq2")
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
library("DESeq2")
library("DESeq2", lib.loc="~/R/win-library/3.4")
remove.packages("DESeq2", lib="~/R/win-library/3.4")
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
library("DESeq2")
source("http://www.bioconductor.org/biocLite.R")
biocLite("DESeq2")
biocLite
biocLite("Biobase")
knitr::opts_chunk$set(echo = TRUE)
#source("http://www.bioconductor.org/biocLite.R")
#biocLite("DESeq2")
library("Biobase")
library("DESeq2")
install.packages("stringi",type="mac.binary")
install.packages("stringi")
#source("http://www.bioconductor.org/biocLite.R")
#biocLite("DESeq2")
library("Biobase")
library("DESeq2")
install.packages("data.table")
#source("http://www.bioconductor.org/biocLite.R")
#biocLite("DESeq2")
library("Biobase")
library("DESeq2")
install.packages("bit")
#source("http://www.bioconductor.org/biocLite.R")
#biocLite("DESeq2")
library("Biobase")
library("DESeq2")
library("limma")
library("edgeR")
load('bottomly_eset.RData')
eset<-bottomly.2reps
cpm.mat<-log(cpm(exprs(eset)))
mean.vec<-apply(cpm.mat, 1, mean)
sdvec<-apply(cpm.mat, 1, sd)
plot(mean.vec, sdvec, pch=".", main="2 replicates", ylab="sd", xlab="Average logCPM")
eset<-bottomly.eset
cpm.mat<-log(cpm(exprs(eset)))
mean.vec<-apply(cpm.mat, 1, mean)
sdvec<-apply(cpm.mat, 1, sd)
plot(mean.vec, sdvec, pch=".", main="10 replicates", ylab="sd", xlab="Average logCPM")
dds<-DESeqDataSetFromMatrix(countData = exprs(bottomly.eset), colData = pData(bottomly.eset), design = ~strain)
dds<-DESeq(dds)
dds.2rep<-DESeqDataSetFromMatrix(countData = exprs(bottomly.2reps), colData = pData(bottomly.2reps), design = ~strain)
dds<-DESeq(dds.2rep)
plotDispEsts(dds)
plotDispEsts(dds.2rep)
dds<-DESeqDataSetFromMatrix(countData = exprs(bottomly.eset), colData = pData(bottomly.eset), design = ~strain)
dds<-DESeq(dds)
dds.2rep<-DESeqDataSetFromMatrix(countData = exprs(bottomly.2reps), colData = pData(bottomly.2reps), design = ~strain)
dds.2rep<-DESeq(dds.2rep)
plotDispEsts(dds)
plotDispEsts(dds.2rep)
plotDispEsts(dds, main="10 replicates")
plotDispEsts(dds.2rep, main="2 replicates")
plotDispEsts(dds, main="10 replicates")
plotDispEsts(dds, main="10 replicates")
plotDispEsts(dds.2rep, main="2 replicates")
knitr::opts_chunk$set(echo = TRUE)
dge <- DGEList(counts=exprs(bottomly.eset), group=pData(bottomly.eset)$strain)
#source("http://www.bioconductor.org/biocLite.R")
#biocLite("DESeq2")
library("Biobase")
library("DESeq2")
library("limma")
library("edgeR")
load('bottomly_eset.RData')
dge <- DGEList(counts=exprs(bottomly.eset), group=pData(bottomly.eset)$strain)
# Normalize by total count
dge <- calcNormFactors(dge)
# Create the contrast matrix
design.mat <- model.matrix(~ 0 + dge$samples$group)
colnames(design.mat) <- levels(dge$samples$group)
# Estimate dispersion parameter for GLM
dge <- estimateGLMCommonDisp(dge, design.mat)
dge <- estimateGLMTrendedDisp(dge, design.mat, method="power")
dge<- estimateGLMTagwiseDisp(dge,design.mat)
plotBCV(dge)
knitr::opts_chunk$set(echo = TRUE)
#Create design matrix
design<-model.matrix(~pData(bottomly.eset)$strain)
#source("http://www.bioconductor.org/biocLite.R")
#biocLite("DESeq2")
library("Biobase")
library("DESeq2")
library("limma")
library("edgeR")
load('bottomly_eset.RData')
#Create design matrix
design<-model.matrix(~pData(bottomly.eset)$strain)
#Apply voom transformation
nf<-calcNormFactors(bottomly.eset)
v<-voom(exprs(bottomly.eset), design, lib.size = colSums(exprs(bottomly.eset))*nf, normalize.method = "quantile", plot = TRUE)
#Do same for 2 and 5 replicate datasets
